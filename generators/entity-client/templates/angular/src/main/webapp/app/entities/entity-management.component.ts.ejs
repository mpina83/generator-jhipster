<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import { Component, OnInit, OnDestroy, AfterViewInit, ViewChild } from '@angular/core';
import { <%_ if (pagination !== 'no') { _%>HttpHeaders, <% } %>HttpResponse } from '@angular/common/http';
<%_ if (pagination === 'pagination' || pagination === 'pager') { _%>
import { ActivatedRoute, Router } from '@angular/router';
<%_ } else if (searchEngine === 'elasticsearch') { _%>
import { ActivatedRoute } from '@angular/router';
<%_ } _%>
import { Subscription } from 'rxjs';
import { JhiEventManager <% if (pagination !== 'no') { %>, JhiParseLinks <% } %><% if (fieldsContainBlob) { %>, JhiDataUtils<% } %> } from 'ng-jhipster';

import { I<%= entityAngularName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
<%_ if (pagination !== 'no') { %>
import { ITEMS_PER_PAGE } from 'app/shared/constants/pagination.constants';
<%_ } _%>
import { <%= entityAngularName %>Service } from './<%= entityFileName %>.service';
import { MatSort } from '@angular/material/sort';
import { MatPaginator, PageEvent } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';

@Component({
    selector: '<%= jhiPrefixDashed %>-<%= entityFileName %>',
    templateUrl: './<%= entityFileName %>.component.html'
})
export class <%= entityAngularName %>Component implements OnInit, OnDestroy, AfterViewInit {
/** Mat Table **/
    displayedColumns: string[] = [];
    dataSource: MatTableDataSource<I<%= entityAngularName %>>;
    pageEvent: PageEvent;

    pageIndex: number;
    pageSize: number;
    length: number;

    @ViewChild(MatPaginator, {static: false}) paginator: MatPaginator;
    @ViewChild(MatSort, {static: false}) sortMat: MatSort;
    <%_ if (pagination === 'pagination' || pagination === 'pager') { _%>
<%- include('pagination-template', {toArrayString: toArrayString}); -%>
    <%_ } else if (pagination === 'infinite-scroll') { _%>
<%- include('infinite-scroll-template', {toArrayString: toArrayString}); -%>
    <%_ } else if (pagination === 'no') { _%>
<%- include('no-pagination-template', {toArrayString: toArrayString}); -%>
    <%_ } _%>

    ngOnInit() {
        this.registerChangeIn<%= entityClassPlural %>();
    }

    // can only init mat-paginator on AfterViewInit to bind correctly
    ngAfterViewInit(): void {
    this.loadAll();
    }

    ngOnDestroy() {
        this.eventManager.destroy(this.eventSubscriber);
    }

    // DataTable Filter
    applyFilter(filterValue: string) {
        this.dataSource.filter = filterValue.trim().toLowerCase();

        if (this.dataSource.paginator) {
            // force paginator to update info
            setTimeout(() => {
                this.paginator.pageIndex = this.page - 1;
                this.paginator.length = this.totalItems
            })
        }
    }
    // angular mat aync call
    public getServerData(event?: PageEvent) {
        this.page = event.pageIndex + 1;
        this.previousPage = event.previousPageIndex;
        this.loadPage(event.pageIndex);
        return event;
    }

    /** Angular Mat specific methods BEGIN **/
    protected paginateEmailTemplatesMat(data:  I<%= entityAngularName %>[], headers: HttpHeaders) {
        // Collect columns to display
        this.buildDisplayedColumns(data);

        // Assign the data to the data source for the table to render
        this.dataSource = new MatTableDataSource(data);
        // Init Table
        this.dataSource.paginator = this.paginator;
        this.dataSource.sort = this.sortMat;

        // force paginator to update info
        setTimeout(() => {
            this.paginator.pageIndex = this.page - 1;
            this.paginator.length = this.totalItems
        })
    }

    protected buildDisplayedColumns(data:  I<%= entityAngularName %>[]) {
    if (data && data.length > 0) {
        this.displayedColumns = Object.keys(data[0]);
        this.displayedColumns.push('options');
        }
    }

    /** Angular Mat specific methods  END **/

    trackId(index: number, item: I<%= entityAngularName %>) {
        return item.id;
    }
    <%_ if (fieldsContainBlob) { _%>

    byteSize(field) {
        return this.dataUtils.byteSize(field);
    }

    openFile(contentType, field) {
        return this.dataUtils.openFile(contentType, field);
    }
    <%_ } _%>
    <%_
    let eventCallBack = 'this.loadAll()';
    if (pagination === 'infinite-scroll') {
        eventCallBack = 'this.reset()';
    } _%>

    registerChangeIn<%= entityClassPlural %>() {
        this.eventSubscriber = this.eventManager.subscribe('<%= entityInstance %>ListModification', () => <%= eventCallBack %>);
    }
    <%_ if (pagination !== 'no') { _%>
        <%_ if (databaseType !== 'cassandra') { _%>

    sort() {
        const result = [this.predicate + ',' + (this.reverse ? 'asc' : 'desc')];
        if (this.predicate !== 'id') {
            result.push('id');
        }
        return result;
    }
        <%_ } _%>
        <%_ if (pagination === 'pagination' || pagination === 'pager') { _%>

    protected paginate<%= entityClassPlural %>(data: I<%= entityAngularName %>[], headers: HttpHeaders) {
        <%_ if (databaseType !== 'cassandra') { _%>
        this.links = this.parseLinks.parse(headers.get('link'));
        this.totalItems = parseInt(headers.get('X-Total-Count'), 10);
        <%_ } _%>
        this.<%= entityInstancePlural %> = data;
    }
        <%_ } else if (pagination === 'infinite-scroll') { _%>

    protected paginate<%= entityClassPlural %>(data: I<%= entityAngularName %>[], headers: HttpHeaders) {
        this.links = this.parseLinks.parse(headers.get('link'));
        this.totalItems = parseInt(headers.get('X-Total-Count'), 10);
        for (let i = 0; i < data.length; i++) {
            this.<%= entityInstancePlural %>.push(data[i]);
        }
    }
    <%_ }} _%>
}
